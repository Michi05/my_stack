<package>

  <!-- Package summary -->
  <description brief="A collection of robot descriptions.">

    This package is a collection of urdf (and other) files used to describe various robots.  Most
    robots have descriptions in their own robot-specific packages, but these descriptions are often
    written in inconsistent or even incorrect ways, using differing naming conventions and improper
    namespace handling.  In particular, many robot descriptions do not properly allow all topics to
    be pushed into a particular namespace, which causes problems for multi-robot setups.  This
    package tries to clean up these robot descriptions and present them in a consistent manner,
    while also providing a place to store customised robot descriptions.

    By convention, urdf robot descriptions are normally uploaded to a "robot_description" key in the
    parameter server on launch.  Some ROS nodes and gazebo plugins assume that this convention is
    followed, and some things may actually break if this is not done.  The intention is to avoid
    such dependencies, but in some cases this may be difficult, so by default the convention should
    be followed.

    The urdf descriptions are stored in *.urdf.xacro format, and they should be edited directly.
    This means we don't have to build this package to "process" the xacro files.  Instead, xacro can
    be used to load the descriptions into the parameter server.

    The preferred way of handling robot descriptions involves the following files:

    urdf/
      common.xacro          - common xacro definitions
      (part).urdf[.xacro]   - urdf definition for a robot part or sensor (robot element has no name)

    robots/
      (robot).urdf[.xacro]  - urdf definition for a robot (robot element has name)

    By convention, each robot should subscribe to the following topics in its namespace:

      geometry_msgs/Twist   cmd_vel   Desired 6D velocity (subset of the fields are considered)
      (...add entries for other controllers)

    By convention each robot may publish the following topics in its namespace:

      nav_msgs/Odometry     pose_ground_truth   Ground truth 6D pose
      nav_msgs/Odometry     odom                Odometric updates in 6D
      nav_msgs/Odometry     imu                 Inertial updates in 6D
      (...add entries for other sensors)



    Notes:

    There are several ways to control differential drive robots in ROS.

      1. p2os + gazebo:
          -packages:
            -gazebo: "differential_position2d" controller in model
            -gazebo_plugins: "gazebo_ros_diffdrive" executable
          -description: driver is ROS node which connects to the gazebo simulation and position2d
           interfaces, and translates between ROS topics and gazebo position interface data.
          -cons: hard-coded everything (interface name, topics, etc.); slight performance penalty
           since need another process (compared to running a real gazebo plugin)
          -pros: separate binary is like real robots (separate driver); separate binary avoids
           having unused ROS nodes and topics; uses standard gazebo position2d controller which
           allows description to be used via player
      2. erratic + gazebo:
          -packages:
            -erratic_gazebo_plugins "libdiffdrive_plugin.so" in model
            -pr2_mechanism_model: SimpleTransmission for each wheel in model                                      -- WHY???
            -gazebo_ros_controller_manager: "libgazebo_ros_controller_manager.so" for each transmission in model  -- WHY???
            -robot_state_publisher: state_publisher executable                                                    -- WHY???
          -description: pure gazebo plugin and ROS node loaded with model; translates between ROS
           topics and gazebo position interface data.
          -cons: rviz issues mentioned in code; topic names set in model and can't be mapped; forces
           ROS node and topics on load even if not used (i.e. no separate driver)
          -pros: slight performance edge (compared to running a separate gazebo client)
      3. erratic:
          -packages: erratic_player driver talks to real erratic robot by wrapping player driver
      4. p2os:
          -packages: p2os_driver talks to real p2os controller directly
      5. pr2 + gazebo:
          -transmission + controller manager + ...???
      6. pr2:
          -transmission + controller manager + ...???

    TODO: Fix robot descriptions per below.
    TODO: Write new version of gazebo diff drive driver like the p2os robots use in my_gazebo_controllers
    TODO: Write keyboard teleop program

  </description>
  <author>Kevin LeBlanc</author>
  <license>BSD</license>
  <url></url>

  <!-- We use the erratic robot description -->
  <depend package="erratic_description" />

  <!-- We use the p2os robot descriptions -->
  <depend package="p2os_urdf" />

  <!-- We use the pr2 robot description -->
  <depend package="pr2_description" />

</package>
