"""autogenerated by genmsg_py from State.msg. Do not edit."""
import roslib.message
import struct

import my_teleop.msg

class State(roslib.message.Message):
  _md5sum = "169b20224a7dd29b091cc66ab41be2e0"
  _type = "my_teleop/State"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Axis[] axes
Button[] buttons

================================================================================
MSG: my_teleop/Axis
int32 type
float32 value

================================================================================
MSG: my_teleop/Button
int32 type
int32 value

"""
  __slots__ = ['axes','buttons']
  _slot_types = ['my_teleop/Axis[]','my_teleop/Button[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       axes,buttons
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(State, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.axes is None:
        self.axes = []
      if self.buttons is None:
        self.buttons = []
    else:
      self.axes = []
      self.buttons = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.axes)
      buff.write(_struct_I.pack(length))
      for val1 in self.axes:
        _x = val1
        buff.write(_struct_if.pack(_x.type, _x.value))
      length = len(self.buttons)
      buff.write(_struct_I.pack(length))
      for val1 in self.buttons:
        _x = val1
        buff.write(_struct_2i.pack(_x.type, _x.value))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.axes = []
      for i in xrange(0, length):
        val1 = my_teleop.msg.Axis()
        _x = val1
        start = end
        end += 8
        (_x.type, _x.value,) = _struct_if.unpack(str[start:end])
        self.axes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.buttons = []
      for i in xrange(0, length):
        val1 = my_teleop.msg.Button()
        _x = val1
        start = end
        end += 8
        (_x.type, _x.value,) = _struct_2i.unpack(str[start:end])
        self.buttons.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.axes)
      buff.write(_struct_I.pack(length))
      for val1 in self.axes:
        _x = val1
        buff.write(_struct_if.pack(_x.type, _x.value))
      length = len(self.buttons)
      buff.write(_struct_I.pack(length))
      for val1 in self.buttons:
        _x = val1
        buff.write(_struct_2i.pack(_x.type, _x.value))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.axes = []
      for i in xrange(0, length):
        val1 = my_teleop.msg.Axis()
        _x = val1
        start = end
        end += 8
        (_x.type, _x.value,) = _struct_if.unpack(str[start:end])
        self.axes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.buttons = []
      for i in xrange(0, length):
        val1 = my_teleop.msg.Button()
        _x = val1
        start = end
        end += 8
        (_x.type, _x.value,) = _struct_2i.unpack(str[start:end])
        self.buttons.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2i = struct.Struct("<2i")
_struct_if = struct.Struct("<if")
