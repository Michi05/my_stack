/* Auto-generated by genmsg_cpp for file /home/klc/Code/skynetish.com/ros/stacks/my_stack/my_teleop/msg/Button.msg */
#ifndef MY_TELEOP_MESSAGE_BUTTON_H
#define MY_TELEOP_MESSAGE_BUTTON_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace my_teleop
{
template <class ContainerAllocator>
struct Button_ : public ros::Message
{
  typedef Button_<ContainerAllocator> Type;

  Button_()
  : type(0)
  , value(0)
  {
  }

  Button_(const ContainerAllocator& _alloc)
  : type(0)
  , value(0)
  {
  }

  typedef int32_t _type_type;
  int32_t type;

  typedef int32_t _value_type;
  int32_t value;


private:
  static const char* __s_getDataType_() { return "my_teleop/Button"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "21c2f05c8d96e487152613b53f09057b"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 type\n\
int32 value\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, type);
    ros::serialization::serialize(stream, value);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, type);
    ros::serialization::deserialize(stream, value);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(type);
    size += ros::serialization::serializationLength(value);
    return size;
  }

  typedef boost::shared_ptr< ::my_teleop::Button_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_teleop::Button_<ContainerAllocator>  const> ConstPtr;
}; // struct Button
typedef  ::my_teleop::Button_<std::allocator<void> > Button;

typedef boost::shared_ptr< ::my_teleop::Button> ButtonPtr;
typedef boost::shared_ptr< ::my_teleop::Button const> ButtonConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::my_teleop::Button_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::my_teleop::Button_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace my_teleop

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::my_teleop::Button_<ContainerAllocator> > {
  static const char* value() 
  {
    return "21c2f05c8d96e487152613b53f09057b";
  }

  static const char* value(const  ::my_teleop::Button_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x21c2f05c8d96e487ULL;
  static const uint64_t static_value2 = 0x152613b53f09057bULL;
};

template<class ContainerAllocator>
struct DataType< ::my_teleop::Button_<ContainerAllocator> > {
  static const char* value() 
  {
    return "my_teleop/Button";
  }

  static const char* value(const  ::my_teleop::Button_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::my_teleop::Button_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 type\n\
int32 value\n\
\n\
";
  }

  static const char* value(const  ::my_teleop::Button_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::my_teleop::Button_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::my_teleop::Button_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.type);
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Button_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_teleop::Button_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::my_teleop::Button_<ContainerAllocator> & v) 
  {
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MY_TELEOP_MESSAGE_BUTTON_H

